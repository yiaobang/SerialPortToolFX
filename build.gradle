plugins {
    id 'java'
    id('application')
    id('org.openjfx.javafxplugin') version '0.1.0'
    id('org.beryx.jlink') version '3.1.1'
}

group = 'com.yiaobang'
version = '1.0.3'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

repositories {
    mavenLocal()
    maven { url= 'https://maven.aliyun.com/repository/public/' }
    mavenCentral()
    maven { url = 'https://jitpack.io' }
}

javafx {
    version = '24'
    modules = ['javafx.controls', 'javafx.fxml']
}


dependencies {
    implementation 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'

    implementation 'io.github.mkpaz:atlantafx-base:2.0.1'


    implementation 'com.fazecast:jSerialComm:2.11.0'
    implementation 'org.apache.commons:commons-text:1.13.0'
    implementation 'commons-codec:commons-codec:1.18.0'
    implementation 'com.google.code.gson:gson:2.12.1'

    testImplementation platform('org.junit:junit-bom:5.12.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

application {
    applicationName = 'SerialPortToolFX'
    mainClass = 'com.yiaobang.serialPortToolFX.AppLauncher'
    mainModule = 'SerialPortToolFX'
    applicationDefaultJvmArgs = ['-Dfile.encoding=UTF-8'
                                 , '-XX:+UseZGC'
    ]
}

jlink {
    options.set(List.of('--strip-debug', '--compress', 'zip-9', '--no-header-files', '--no-man-pages'))
    launcher {
        name = application.applicationName + version
        imageName.set(application.applicationName)
    }
    imageZip.set(project.file('${project.getLayout().getBuildDirectory().get()}/image-zip/JavaFXSample.zip'))

    jpackage {
        outputDir = 'jpackage'
        imageName = application.applicationName + "-" + version
        skipInstaller = false
        installerName = application.applicationName + "-" + version
        appVersion = version.toString()
        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            icon = 'src/main/resources/application.ico'
            installerOptions += ['--win-dir-chooser', '--win-menu', '--win-shortcut', '--win-menu-group', application.applicationName]
        }
        if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
            icon = 'src/main/resources/application.icons'
        }
        if (org.gradle.internal.os.OperatingSystem.current().linux) {
            icon = 'src/main/resources/application.png'
            installerType = 'deb'
            installerOptions += ['--linux-deb-maintainer', 'icuxika@outlook.com', '--linux-menu-group', application.applicationName, '--linux-shortcut']
        }
    }
}