plugins {
    id 'java'
    id('application')
    id('org.javamodularity.moduleplugin') version '1.8.15'
    id('org.openjfx.javafxplugin') version '0.1.0'
    id('org.beryx.jlink') version '3.1.3'
}

group = 'com.yiaobang'
version = '1.2.0'

java {
    sourceCompatibility = JavaVersion.VERSION_22
    targetCompatibility = JavaVersion.VERSION_22
}

repositories {
    mavenLocal()
    maven { url = 'https://maven.aliyun.com/repository/public/' }
    mavenCentral()
    maven { url = 'https://jitpack.io' }
}

javafx {
    version = '24.0.2'
    modules = ['javafx.controls', 'javafx.fxml']
}


dependencies {
    implementation 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'

    implementation 'io.github.mkpaz:atlantafx-base:2.0.1'


    implementation 'com.fazecast:jSerialComm:2.11.2'
    implementation 'org.apache.commons:commons-text:1.14.0'
    implementation 'commons-codec:commons-codec:1.19.0'
    implementation 'com.google.code.gson:gson:2.13.1'

    testImplementation platform('org.junit:junit-bom:5.12.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

//test {
//    useJUnitPlatform()
//}


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

application {
    applicationName = 'SerialPortToolFX'
    mainClass = 'com.yiaobang.serialporttoolfx.AppLauncher'
    mainModule = 'SerialPortToolFX'
    applicationDefaultJvmArgs = ['-Dfile.encoding=UTF-8'
                                 , '-XX:+UseZGC'
//            ,'-XX:+UseCompactObjectHeaders'
            ,'--add-opens=java.base/sun.nio.ch=ALL-UNNAMED'
            ,'--add-opens=java.base/java.io=ALL-UNNAMED'
    ]
}

jlink {
    options.set(List.of('--strip-debug', '--compress', 'zip-9', '--no-header-files', '--no-man-pages'))
    launcher {
        name = application.applicationName + version
        imageName.set(application.applicationName)
    }
    imageZip.set(project.layout.buildDirectory.file("image-zip/SerialPortToolFX.zip"))

    jpackage {
        outputDir = 'jpackage'
        imageName = application.applicationName + "-" + version
        installerName = application.applicationName + "-" + version
        appVersion = version.toString()
        vendor = "yiaobang"
        description = "A practical serial port utility built with JavaFX."

        // 是否跳过创建安装包（可根据需求设为 true/false）
        skipInstaller = false

        // --- 平台特定配置 ---
        def os = org.gradle.internal.os.OperatingSystem.current()
        if (os.isWindows()) {
            icon = 'src/main/resources/application.ico'
            installerOptions.addAll([
                    '--win-dir-chooser',           // 允许用户选择安装目录
                    '--win-menu',                  // 在开始菜单创建快捷方式
                    '--win-shortcut',              // 在桌面创建快捷方式
                    '--win-menu-group', application.applicationName, // 菜单组名
                    '--win-upgrade-uuid', 'c1f5e3a8-6f4a-4c2a-9c95-8d3c7345b91e', // 升级唯一标识
                    '--win-shortcut-prompt',       // 提示是否创建快捷方式
                    '--win-help-url', 'https://github.com/yiaobang/SerialPortToolFX' // 帮助链接
            ])
        }
        if (os.isMacOsX()) {
            icon = 'src/main/resources/ico.icns'
            installerOptions.addAll([
                    '--mac-package-identifier', 'com.yiaobang.serialPortToolFX' // 应用包标识符
            ])
        }
        if (os.isLinux()) {
            icon = 'src/main/resources/ico.png'
            installerType = 'deb'
            installerOptions.addAll([
                    '--linux-deb-maintainer', 'yiaobang@gmail.com', // 维护者信息
                    '--linux-menu-group', application.applicationName, // 菜单组名
                    '--linux-shortcut', // 创建桌面快捷方式
                    '--linux-app-category', 'Utility', // 应用类别
                    '--linux-description', 'A practical serial port utility built with JavaFX.', // 应用描述
                    '--linux-url', 'https://github.com/yiaobang/SerialPortToolFX', // 应用主页
                    '--linux-bundle-name', 'serialPortToolFX' // 安装包名
            ])
        }

    }
}